{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jaydo/practiceRun/my-app/app/api/gptNotes/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport OpenAI from \"openai\";\r\n\r\nconst systemPrompt = `We want a message that correlates to this field:`;\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const body = await req.json();\r\n    console.log(\"in backend, body is\", body);\r\n\r\n    if (!process.env.AZURE_OPENAI_KEY) {\r\n      throw new Error(\"Azure OpenAI API key not configured\");\r\n    }\r\n\r\n    if (!process.env.AZURE_OPENAI_ENDPOINT) {\r\n      throw new Error(\"Azure OpenAI endpoint not configured\");\r\n    }\r\n\r\n    const response = await fetch(\r\n      `${process.env.AZURE_OPENAI_ENDPOINT}/openai/deployments/gpt35turbo/chat/completions?api-version=2024-02-15-preview`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"api-key\": process.env.AZURE_OPENAI_KEY,\r\n        },\r\n        body: JSON.stringify({\r\n          messages: [\r\n            {\r\n              role: \"system\",\r\n              content: systemPrompt\r\n            },\r\n            ...(body.messages || [])\r\n          ],\r\n          temperature: 0.7,\r\n        }),\r\n      }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      console.error(\"Azure OpenAI API error:\", errorData);\r\n      throw new Error(`Azure OpenAI API error: ${response.status}`);\r\n    }\r\n\r\n    console.log(\"in backend, response is\", response);\r\n    const data = await response.json();\r\n    console.log(\"in backend, data is\", data);\r\n    return NextResponse.json(data);\r\n  } catch (error: any) {\r\n    console.error(\"Error:\", error);\r\n    return NextResponse.json(\r\n      { error: error?.message || \"An error occurred\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// export async function POST(req: Request) {\r\n//     const openai = new OpenAI({\r\n//         apiKey: process.env.OPENAI_API_KEY,\r\n//     });\r\n//     const data = await req.json();\r\n//     const completion = await openai.chat.completions.create({\r\n//         messages: [\r\n//             {\r\n//                 role: \"system\",\r\n//                 content: systemPrompt,\r\n\r\n//             },\r\n            \r\n//             ...data,\r\n//         ],\r\n//         model: \"gpt-3.5-turbo\",\r\n//         stream: true\r\n//     });\r\n\r\n//     const stream = new ReadableStream({\r\n//         async start(controller) {\r\n//             const encoder = new TextEncoder();\r\n//             try {\r\n//                 for await (const chunk of completion) {\r\n//                     const content = chunk.choices[0]?.delta?.content;\r\n//                     if (content) {\r\n//                         const text = encoder.encode(content);\r\n//                         controller.enqueue(text);\r\n//                     }\r\n//                 }\r\n//             } finally {\r\n//                 controller.close();\r\n//             }\r\n//         }\r\n//     });\r\n\r\n//     return new NextResponse(stream);\r\n// }"],"names":[],"mappings":";;;AAAA;;AAGA,MAAM,eAAe,CAAC,gDAAgD,CAAC;AAEhE,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,QAAQ,GAAG,CAAC,uBAAuB;QAEnC,IAAI,CAAC,QAAQ,GAAG,CAAC,gBAAgB,EAAE;YACjC,MAAM,IAAI,MAAM;QAClB;QAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,qBAAqB,EAAE;YACtC,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,WAAW,MAAM,MACrB,GAAG,QAAQ,GAAG,CAAC,qBAAqB,CAAC,8EAA8E,CAAC,EACpH;YACE,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,WAAW,QAAQ,GAAG,CAAC,gBAAgB;YACzC;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,UAAU;oBACR;wBACE,MAAM;wBACN,SAAS;oBACX;uBACI,KAAK,QAAQ,IAAI,EAAE;iBACxB;gBACD,aAAa;YACf;QACF;QAGF,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,QAAQ,KAAK,CAAC,2BAA2B;YACzC,MAAM,IAAI,MAAM,CAAC,wBAAwB,EAAE,SAAS,MAAM,EAAE;QAC9D;QAEA,QAAQ,GAAG,CAAC,2BAA2B;QACvC,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,QAAQ,GAAG,CAAC,uBAAuB;QACnC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,UAAU;QACxB,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,OAAO,WAAW;QAAoB,GAC/C;YAAE,QAAQ;QAAI;IAElB;AACF,EAGA,6CAA6C;CAC7C,kCAAkC;CAClC,8CAA8C;CAC9C,UAAU;CACV,qCAAqC;CACrC,gEAAgE;CAChE,sBAAsB;CACtB,gBAAgB;CAChB,kCAAkC;CAClC,yCAAyC;CAEzC,iBAAiB;CAEjB,uBAAuB;CACvB,aAAa;CACb,kCAAkC;CAClC,uBAAuB;CACvB,UAAU;CAEV,0CAA0C;CAC1C,oCAAoC;CACpC,iDAAiD;CACjD,oBAAoB;CACpB,0DAA0D;CAC1D,wEAAwE;CACxE,qCAAqC;CACrC,gEAAgE;CAChE,oDAAoD;CACpD,wBAAwB;CACxB,oBAAoB;CACpB,0BAA0B;CAC1B,sCAAsC;CACtC,gBAAgB;CAChB,YAAY;CACZ,UAAU;CAEV,uCAAuC;CACvC,IAAI","debugId":null}}]
}