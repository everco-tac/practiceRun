{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jaydo/practiceRun/my-app/app/api/upload/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const formData = await request.formData();\r\n    const file = formData.get('file') as File;\r\n    \r\n    if (!file) {\r\n      return NextResponse.json(\r\n        { error: 'No file provided' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // 1. Get SAS URL\r\n    const sasRes = await fetch(`${process.env.API_BASE_URL}/api/azure/generate-sas`);\r\n    const { sasUrl } = await sasRes.json();\r\n\r\n    // 2. Upload to Azure Blob\r\n    const uploadRes = await fetch(sasUrl, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'x-ms-blob-type': 'BlockBlob',\r\n        'Content-Type': file.type,\r\n      },\r\n      body: file,\r\n    });\r\n\r\n    if (!uploadRes.ok) {\r\n      throw new Error('Failed to upload to Azure');\r\n    }\r\n\r\n    // 3. Process with OpenAI\r\n    const openAIRes = await fetch(`${process.env.API_BASE_URL}/api/parse-contract`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ fileUrl: sasUrl.split('?')[0] }),\r\n    });\r\n\r\n    if (!openAIRes.ok) {\r\n      throw new Error('Failed to process with OpenAI');\r\n    }\r\n\r\n    const result = await openAIRes.json();\r\n\r\n    return NextResponse.json({ \r\n      success: true, \r\n      result \r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Upload processing error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to process upload' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,WAAW,MAAM,QAAQ,QAAQ;QACvC,MAAM,OAAO,SAAS,GAAG,CAAC;QAE1B,IAAI,CAAC,MAAM;YACT,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmB,GAC5B;gBAAE,QAAQ;YAAI;QAElB;QAEA,iBAAiB;QACjB,MAAM,SAAS,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,YAAY,CAAC,uBAAuB,CAAC;QAC/E,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO,IAAI;QAEpC,0BAA0B;QAC1B,MAAM,YAAY,MAAM,MAAM,QAAQ;YACpC,QAAQ;YACR,SAAS;gBACP,kBAAkB;gBAClB,gBAAgB,KAAK,IAAI;YAC3B;YACA,MAAM;QACR;QAEA,IAAI,CAAC,UAAU,EAAE,EAAE;YACjB,MAAM,IAAI,MAAM;QAClB;QAEA,yBAAyB;QACzB,MAAM,YAAY,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,YAAY,CAAC,mBAAmB,CAAC,EAAE;YAC9E,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBAAE,SAAS,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE;YAAC;QACvD;QAEA,IAAI,CAAC,UAAU,EAAE,EAAE;YACjB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,SAAS,MAAM,UAAU,IAAI;QAEnC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}